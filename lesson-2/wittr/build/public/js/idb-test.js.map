{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","public/js/idb-test/index.js"],"names":[],"mappingsmBC/SgB,KAAK;;;;;;;;;AAOrB,IAAI,SAAS,GAAG,iBAAI,IAAI,CAAC,SAAS,EAAE,CAAC;;AAEnC,UAAS,SAAS,EAAC;;;AAGjB,UAAO,SAAS,CAAC,UAAU;;;AAGzB,SAAK,CAAC;;AAEN,UAAI,WAAW,GAAG,SAAS,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;;;;AAIxD,iBAAW,CAAC,GAAG;;AAEb,aAAO;;AAEP,aAAO,CAAC,CAAC;;AAAA;;AAIb,SAAK,CAAC;;;;;;AAMJ,eAAS,CAAC,iBAAiB,CAAC,QAAQ,EAAE,EAAC,OAAO,EAAE,MAAM,EAAC,CAAC,CAAC;AAAA,GAC1D;CAEJ,CAAC,CAAC;;;AAGH,SAAS,CAAC,IAAI,CAAC,UAAS,EAAE,EAAC;;;;AAIzB,MAAI,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;;;AAG3C,MAAI,QAAQ,GAAG,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;;;;AAIjD,SAAO,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;;;;CAI9B,CAAC,CAAC,IAAI,CAAC,UAAS,GAAG,EAAC;AACnB,SAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,GAAG,CAAC,CAAC;CAC9C,CAAC,CAAC;;;AAGH,SAAS,CAAC,IAAI,CAAC,UAAS,EAAE,EAAC;;AAEzB,MAAI,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;;;AAGxD,MAAI,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;;;AAGpD,aAAW,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;;;AAG9B,SAAO,WAAW,CAAC,QAAQ,CAAC;CAC7B,CAAC,CAAC,IAAI,CAAC,YAAU;AAChB,SAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;CACxC,CAAC,CAAC;;;AAGH,SAAS,CAAC,IAAI,CAAC,UAAS,EAAE,EAAC;;AAEzB,MAAI,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;;;AAGxD,MAAI,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;;;AAGpD,aAAW,CAAC,GAAG,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;;;AAGzC,SAAO,WAAW,CAAC,QAAQ,CAAC;CAC7B,CAAC,CAAC,IAAI,CAAC,YAAU;AAChB,SAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;CAC/C,CAAC,CAAC;;;AAGH,SAAS,CAAC,IAAI,CAAC,UAAS,EAAE,EAAC;;AAEzB,MAAI,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;;;AAGxD,MAAI,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;;;;;AAKpD,aAAW,CAAC,GAAG,CAAC;AACd,QAAI,EAAC,WAAW;AAChB,OAAG,EAAE,EAAE;AACP,kBAAc,EAAE,KAAK;GACtB,CAAC,CAAC;;;AAGH,aAAW,CAAC,GAAG,CAAC;AACd,QAAI,EAAC,kBAAkB;AACvB,OAAG,EAAE,EAAE;AACP,kBAAc,EAAE,KAAK;GACtB,CAAC,CAAC;;AAEH,aAAW,CAAC,GAAG,CAAC;AACd,QAAI,EAAC,cAAc;AACnB,OAAG,EAAE,EAAE;AACP,kBAAc,EAAE,KAAK;GACtB,CAAC,CAAC;;AAEH,aAAW,CAAC,GAAG,CAAC;AACd,QAAI,EAAC,eAAe;AACpB,OAAG,EAAE,EAAE;AACP,kBAAc,EAAE,KAAK;GACtB,CAAC,CAAC;;;AAGH,SAAO,WAAW,CAAC,QAAQ,CAAC;CAC7B,CAAC,CAAC,IAAI,CAAC,YAAU;AAChB,SAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;CAC7B,CAAC,CAAC;;;;AAIH,SAAS,CAAC,IAAI,CAAC,UAAS,EAAE,EAAC;;;;AAIzB,MAAI,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;;;AAG3C,MAAI,UAAU,GAAG,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;;;AAGnD,SAAO,UAAU,CAAC,MAAM,EAAE,CAAC;;;;;;CAM5B,CAAC,CAAC,IAAI,CAAC,UAAS,GAAG,EAAC;AACnB,SAAO,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;CAC7B,CAAC,CAAC","file":"idb-test.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n  \n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","import idb from 'idb';\r\n\r\n// more on usage of this API here : https://github.com/jakearchibald/idb\r\n// goes as follows idb.open(name, version, upgradeCallback)\r\n// Example: \r\n// This returns a promise, let's store that for later with a var\r\n\r\nvar dbPromise = idb.open('test-db', 2, \r\n  // this defines the database\r\n  function(upgradeDb){\r\n    \r\n    // this creates a switch to update the browser with the new version of the indexDB, to the new one\r\n    switch(upgradeDb.oldVersion){\r\n\r\n     // case 0 is called if the browser does not have the first version installed, then it installs it if it does not \r\n      case 0:\r\n      // this store has a key that's separate to the data, which is what we want to store in keyvalStore\r\n      var keyValStore = upgradeDb.createObjectStore('keyval');\r\n\r\n      //objectStore documentation here: https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore\r\n      // accepts the values of objectStore(name, optionalKey)\r\n      keyValStore.put(\r\n        // this is the object name:\r\n        'world', \r\n        // and this is the optional key\r\n        'hello');\r\n\r\n    // after case 1 is called, this stores  the new objectStore after the first case hase been creater, or if already created\r\n    // it installs case 1 after confirming case 0 is created\r\n    case 1:\r\n    \r\n      // object stores can only be called within the upgradeDb function nowhere else.\r\n      // below is the code  to create a new object store for the 'people' object\r\n      // This sets the object's 'name' as the key, which is stored by name rather than by key\r\n      // when adding new object stores, the version needs to be changed\r\n      upgradeDb.createObjectStore('people', {keyPath: 'name'});\r\n    }\r\n\r\n});\r\n\r\n// this calls our database, and reads from it, after the promise has been fulfilled (dbPromise)\r\ndbPromise.then(function(db){\r\n\r\n  // this is the function to read from the database which accepts the objectStore which was created above, in this case keyval\r\n  // this function selects the 'keyval' object store, ready to use, with an optional 'do something' argument\r\n  var transaction = db.transaction('keyval');\r\n\r\n  // this calls the object store (DB) we want to display\r\n  var keyValDB = transaction.objectStore('keyval');\r\n\r\n  // this returns a key within the keyval object, in thie case the 'hello' created above\r\n  // this returns a promise\r\n  return keyValDB.get('hello');\r\n\r\n  // within the promise, we grab the value of hello, which in this case is world.\r\n  // the value of this key store is the function argument\r\n}).then(function(val){\r\n  console.log('The value of \"hello\" is:', val);\r\n});\r\n\r\n// the following is used to add values to exsisting object stores\r\ndbPromise.then(function(db){\r\n  // once again grabs our DB, but this time, 'readwrite' is added to the optional valueto write something\r\n  var transaction = db.transaction('keyval', 'readwrite');\r\n\r\n  // this once again calls our db after its been registered\r\n  var keyValWrite = transaction.objectStore('keyval');\r\n\r\n  // this stores new values into ur DB, with the value being the first argument and the key being the second argument\r\n  keyValWrite.put('bar', 'foo');\r\n\r\n  // this returns a promise, that only returns if and when the transaction completes, and rejects if it fails\r\n  return transaction.complete;\r\n}).then(function(){\r\n  console.log('Added foo:bar to keyval');\r\n});\r\n\r\n// the following is used to add values to exsisting object stores\r\ndbPromise.then(function(db){\r\n  // once again grabs our DB, but this time, 'readwrite' is added to the optional valueto write something\r\n  var transaction = db.transaction('keyval', 'readwrite');\r\n\r\n  // this once again calls our db after its been registered\r\n  var keyValWrite = transaction.objectStore('keyval');\r\n\r\n  // this stores new values into ur DB, with the value being the first argument and the key being the second argument\r\n  keyValWrite.put('dog', 'favoriteAnimal');\r\n\r\n  // this returns a promise, that only returns if and when the transaction completes, and rejects if it fails\r\n  return transaction.complete;\r\n}).then(function(){\r\n  console.log('Added favoriteAnimal key : dog');\r\n});\r\n\r\n// the following creates the values to the people Object store:\r\ndbPromise.then(function(db){\r\n  // once again grabs our DB, but this time, 'readwrite' is added to the optional valueto write something\r\n  var transaction = db.transaction('people', 'readwrite');\r\n\r\n  // this once again calls our db after its been registered\r\n  var peopleStore = transaction.objectStore('people');\r\n\r\n  // this stores new values into ur DB, creating an object with whatever values I set within the transaction.put arguments.\r\n  // There is no key necessary here, since we have told this specific store to add the name property as the key for this DB\r\n  // Example here: \r\n  peopleStore.put({\r\n    name:'Sam Munoz',\r\n    age: 25,\r\n    favoriteAnimal: 'dog'\r\n  });\r\n\r\n  // here are more to people to add to this DB objectStore:\r\n  peopleStore.put({\r\n    name:'Hermione Granger',\r\n    age: 18,\r\n    favoriteAnimal: 'cat'\r\n  });  \r\n\r\n  peopleStore.put({\r\n    name:'Harry Potter',\r\n    age: 19,\r\n    favoriteAnimal: 'owl'\r\n  });  \r\n\r\n  peopleStore.put({\r\n    name:'Ronald Wesley',\r\n    age: 19,\r\n    favoriteAnimal: 'rat'\r\n  }); \r\n\r\n  // this returns a promise, that only returns if and when the transaction completes, and rejects if it fails\r\n  return transaction.complete;\r\n}).then(function(){\r\n  console.log('People added');\r\n});\r\n\r\n// the following reads the values of the people objectStore\r\n// this calls our database, and reads from it, after the promise has been fulfilled (dbPromise)\r\ndbPromise.then(function(db){\r\n\r\n  // this is the function to read from the database which accepts the objectStore which was created above, in this case keyval\r\n  // this function selects the 'keyval' object store, ready to use, with an optional 'do something' argument\r\n  var transaction = db.transaction('people');\r\n\r\n  // this calls the object store (DB) we want to display\r\n  var peopleRead = transaction.objectStore('people');\r\n\r\n  // this returns all keys and values within the people objectSTore\r\n  return peopleRead.getAll();\r\n\r\n  // once fulfilled, this logs the values of the people store\r\n  // this grabs ALL the values of the DB and logs them in alphabetical order\r\n  // VERY IMPORTANT this is exactly how the values will be grabbed from the transportation API and placed within the view of the application\r\n  // \r\n}).then(function(val){\r\n  console.log('People:', val);\r\n});"],"preExisting":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvaWRiL2xpYi9pZGIuanMiLCJEOi9Eb2N1bWVudHMvU2Nob29sL3VkYWNpdHkvY291cnNlcy9vZmZsaW5lLWFwcGxpY2F0aW9ucy9sZXNzb24tMi93aXR0ci9wdWJsaWMvanMvaWRiLXRlc3QvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O21CQy9TZ0IsS0FBSzs7Ozs7Ozs7O0FBT3JCLElBQUksU0FBUyxHQUFHLGlCQUFJLElB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RUFBRSxLQUFLO0dBQ3RCLENBQUMsQ0FBQzs7QUFFSCxhQUFXLENBQUMsR0FBRyxDQUFDO0FBQ2QsUUFBSSxFQUFDLGVBQWU7QUFDcEIsT0FBRyxFQUFFLEVBQUU7QUFDUCxrQkFBYyxFQUFFLEtBQUs7R0FDdEIsQ0FBQyxDQUFDOzs7QUFHSCxTQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUM7Q0FDN0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFVO0FBQ2hCLFNBQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7Q0FDN0IsQ0FBQyxDQUFDOzs7O0FBSUgsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFTLEVBQUUsRUFBQzs7OztBQUl6QixNQUFJLFdBQVcsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7QUFHM0MsTUFBSSxVQUFVLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7O0FBR25ELFNBQU8sVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDOzs7Ozs7Q0FNNUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFTLEdBQUcsRUFBQztBQUNuQixTQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztDQUM3QixDQUFDLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHRvQXJyYXkoYXJyKSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycik7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlcXVlc3QucmVzdWx0KTtcbiAgICAgIH07XG5cbiAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpIHtcbiAgICB2YXIgcmVxdWVzdDtcbiAgICB2YXIgcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVxdWVzdCA9IG9ialttZXRob2RdLmFwcGx5KG9iaiwgYXJncyk7XG4gICAgICBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KTtcblxuICAgIHAucmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgcmV0dXJuIHA7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIHByb21pc2lmeUN1cnNvclJlcXVlc3RDYWxsKG9iaiwgbWV0aG9kLCBhcmdzKSB7XG4gICAgdmFyIHAgPSBwcm9taXNpZnlSZXF1ZXN0Q2FsbChvYmosIG1ldGhvZCwgYXJncyk7XG4gICAgcmV0dXJuIHAudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuICAgICAgcmV0dXJuIG5ldyBDdXJzb3IodmFsdWUsIHAucmVxdWVzdCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eVByb3BlcnRpZXMoUHJveHlDbGFzcywgdGFyZ2V0UHJvcCwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUHJveHlDbGFzcy5wcm90b3R5cGUsIHByb3AsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc1t0YXJnZXRQcm9wXVtwcm9wXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eVJlcXVlc3RNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKHRoaXNbdGFyZ2V0UHJvcF0sIHByb3AsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF0uYXBwbHkodGhpc1t0YXJnZXRQcm9wXSwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeUN1cnNvclJlcXVlc3RDYWxsKHRoaXNbdGFyZ2V0UHJvcF0sIHByb3AsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gSW5kZXgoaW5kZXgpIHtcbiAgICB0aGlzLl9pbmRleCA9IGluZGV4O1xuICB9XG5cbiAgcHJveHlQcm9wZXJ0aWVzKEluZGV4LCAnX2luZGV4JywgW1xuICAgICduYW1lJyxcbiAgICAna2V5UGF0aCcsXG4gICAgJ211bHRpRW50cnknLFxuICAgICd1bmlxdWUnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoSW5kZXgsICdfaW5kZXgnLCBJREJJbmRleCwgW1xuICAgICdnZXQnLFxuICAgICdnZXRLZXknLFxuICAgICdnZXRBbGwnLFxuICAgICdnZXRBbGxLZXlzJyxcbiAgICAnY291bnQnXG4gIF0pO1xuXG4gIHByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMoSW5kZXgsICdfaW5kZXgnLCBJREJJbmRleCwgW1xuICAgICdvcGVuQ3Vyc29yJyxcbiAgICAnb3BlbktleUN1cnNvcidcbiAgXSk7XG5cbiAgZnVuY3Rpb24gQ3Vyc29yKGN1cnNvciwgcmVxdWVzdCkge1xuICAgIHRoaXMuX2N1cnNvciA9IGN1cnNvcjtcbiAgICB0aGlzLl9yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgfVxuXG4gIHByb3h5UHJvcGVydGllcyhDdXJzb3IsICdfY3Vyc29yJywgW1xuICAgICdkaXJlY3Rpb24nLFxuICAgICdrZXknLFxuICAgICdwcmltYXJ5S2V5JyxcbiAgICAndmFsdWUnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoQ3Vyc29yLCAnX2N1cnNvcicsIElEQkN1cnNvciwgW1xuICAgICd1cGRhdGUnLFxuICAgICdkZWxldGUnXG4gIF0pO1xuXG4gIC8vIHByb3h5ICduZXh0JyBtZXRob2RzXG4gIFsnYWR2YW5jZScsICdjb250aW51ZScsICdjb250aW51ZVByaW1hcnlLZXknXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICBpZiAoIShtZXRob2ROYW1lIGluIElEQkN1cnNvci5wcm90b3R5cGUpKSByZXR1cm47XG4gICAgQ3Vyc29yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGN1cnNvciA9IHRoaXM7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBjdXJzb3IuX2N1cnNvclttZXRob2ROYW1lXS5hcHBseShjdXJzb3IuX2N1cnNvciwgYXJncyk7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KGN1cnNvci5fcmVxdWVzdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybjtcbiAgICAgICAgICByZXR1cm4gbmV3IEN1cnNvcih2YWx1ZSwgY3Vyc29yLl9yZXF1ZXN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICBmdW5jdGlvbiBPYmplY3RTdG9yZShzdG9yZSkge1xuICAgIHRoaXMuX3N0b3JlID0gc3RvcmU7XG4gIH1cblxuICBPYmplY3RTdG9yZS5wcm90b3R5cGUuY3JlYXRlSW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4KHRoaXMuX3N0b3JlLmNyZWF0ZUluZGV4LmFwcGx5KHRoaXMuX3N0b3JlLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBPYmplY3RTdG9yZS5wcm90b3R5cGUuaW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4KHRoaXMuX3N0b3JlLmluZGV4LmFwcGx5KHRoaXMuX3N0b3JlLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBwcm94eVByb3BlcnRpZXMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBbXG4gICAgJ25hbWUnLFxuICAgICdrZXlQYXRoJyxcbiAgICAnaW5kZXhOYW1lcycsXG4gICAgJ2F1dG9JbmNyZW1lbnQnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdwdXQnLFxuICAgICdhZGQnLFxuICAgICdkZWxldGUnLFxuICAgICdjbGVhcicsXG4gICAgJ2dldCcsXG4gICAgJ2dldEFsbCcsXG4gICAgJ2dldEFsbEtleXMnLFxuICAgICdjb3VudCdcbiAgXSk7XG5cbiAgcHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyhPYmplY3RTdG9yZSwgJ19zdG9yZScsIElEQk9iamVjdFN0b3JlLCBbXG4gICAgJ29wZW5DdXJzb3InLFxuICAgICdvcGVuS2V5Q3Vyc29yJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdkZWxldGVJbmRleCdcbiAgXSk7XG5cbiAgZnVuY3Rpb24gVHJhbnNhY3Rpb24oaWRiVHJhbnNhY3Rpb24pIHtcbiAgICB0aGlzLl90eCA9IGlkYlRyYW5zYWN0aW9uO1xuICAgIHRoaXMuY29tcGxldGUgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfTtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KGlkYlRyYW5zYWN0aW9uLmVycm9yKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUub2JqZWN0U3RvcmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IE9iamVjdFN0b3JlKHRoaXMuX3R4Lm9iamVjdFN0b3JlLmFwcGx5KHRoaXMuX3R4LCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBwcm94eVByb3BlcnRpZXMoVHJhbnNhY3Rpb24sICdfdHgnLCBbXG4gICAgJ29iamVjdFN0b3JlTmFtZXMnLFxuICAgICdtb2RlJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoVHJhbnNhY3Rpb24sICdfdHgnLCBJREJUcmFuc2FjdGlvbiwgW1xuICAgICdhYm9ydCdcbiAgXSk7XG5cbiAgZnVuY3Rpb24gVXBncmFkZURCKGRiLCBvbGRWZXJzaW9uLCB0cmFuc2FjdGlvbikge1xuICAgIHRoaXMuX2RiID0gZGI7XG4gICAgdGhpcy5vbGRWZXJzaW9uID0gb2xkVmVyc2lvbjtcbiAgICB0aGlzLnRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKTtcbiAgfVxuXG4gIFVwZ3JhZGVEQi5wcm90b3R5cGUuY3JlYXRlT2JqZWN0U3RvcmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IE9iamVjdFN0b3JlKHRoaXMuX2RiLmNyZWF0ZU9iamVjdFN0b3JlLmFwcGx5KHRoaXMuX2RiLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBwcm94eVByb3BlcnRpZXMoVXBncmFkZURCLCAnX2RiJywgW1xuICAgICduYW1lJyxcbiAgICAndmVyc2lvbicsXG4gICAgJ29iamVjdFN0b3JlTmFtZXMnXG4gIF0pO1xuXG4gIHByb3h5TWV0aG9kcyhVcGdyYWRlREIsICdfZGInLCBJREJEYXRhYmFzZSwgW1xuICAgICdkZWxldGVPYmplY3RTdG9yZScsXG4gICAgJ2Nsb3NlJ1xuICBdKTtcblxuICBmdW5jdGlvbiBEQihkYikge1xuICAgIHRoaXMuX2RiID0gZGI7XG4gIH1cblxuICBEQi5wcm90b3R5cGUudHJhbnNhY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uKHRoaXMuX2RiLnRyYW5zYWN0aW9uLmFwcGx5KHRoaXMuX2RiLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBwcm94eVByb3BlcnRpZXMoREIsICdfZGInLCBbXG4gICAgJ25hbWUnLFxuICAgICd2ZXJzaW9uJyxcbiAgICAnb2JqZWN0U3RvcmVOYW1lcydcbiAgXSk7XG5cbiAgcHJveHlNZXRob2RzKERCLCAnX2RiJywgSURCRGF0YWJhc2UsIFtcbiAgICAnY2xvc2UnXG4gIF0pO1xuXG4gIC8vIEFkZCBjdXJzb3IgaXRlcmF0b3JzXG4gIC8vIFRPRE86IHJlbW92ZSB0aGlzIG9uY2UgYnJvd3NlcnMgZG8gdGhlIHJpZ2h0IHRoaW5nIHdpdGggcHJvbWlzZXNcbiAgWydvcGVuQ3Vyc29yJywgJ29wZW5LZXlDdXJzb3InXS5mb3JFYWNoKGZ1bmN0aW9uKGZ1bmNOYW1lKSB7XG4gICAgW09iamVjdFN0b3JlLCBJbmRleF0uZm9yRWFjaChmdW5jdGlvbihDb25zdHJ1Y3Rvcikge1xuICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlW2Z1bmNOYW1lLnJlcGxhY2UoJ29wZW4nLCAnaXRlcmF0ZScpXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICB2YXIgbmF0aXZlT2JqZWN0ID0gdGhpcy5fc3RvcmUgfHwgdGhpcy5faW5kZXg7XG4gICAgICAgIHZhciByZXF1ZXN0ID0gbmF0aXZlT2JqZWN0W2Z1bmNOYW1lXS5hcHBseShuYXRpdmVPYmplY3QsIGFyZ3Muc2xpY2UoMCwgLTEpKTtcbiAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjYWxsYmFjayhyZXF1ZXN0LnJlc3VsdCk7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBwb2x5ZmlsbCBnZXRBbGxcbiAgW0luZGV4LCBPYmplY3RTdG9yZV0uZm9yRWFjaChmdW5jdGlvbihDb25zdHJ1Y3Rvcikge1xuICAgIGlmIChDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0QWxsKSByZXR1cm47XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uKHF1ZXJ5LCBjb3VudCkge1xuICAgICAgdmFyIGluc3RhbmNlID0gdGhpcztcbiAgICAgIHZhciBpdGVtcyA9IFtdO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICBpbnN0YW5jZS5pdGVyYXRlQ3Vyc29yKHF1ZXJ5LCBmdW5jdGlvbihjdXJzb3IpIHtcbiAgICAgICAgICBpZiAoIWN1cnNvcikge1xuICAgICAgICAgICAgcmVzb2x2ZShpdGVtcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGl0ZW1zLnB1c2goY3Vyc29yLnZhbHVlKTtcblxuICAgICAgICAgIGlmIChjb3VudCAhPT0gdW5kZWZpbmVkICYmIGl0ZW1zLmxlbmd0aCA9PSBjb3VudCkge1xuICAgICAgICAgICAgcmVzb2x2ZShpdGVtcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0pO1xuXG4gIHZhciBleHAgPSB7XG4gICAgb3BlbjogZnVuY3Rpb24obmFtZSwgdmVyc2lvbiwgdXBncmFkZUNhbGxiYWNrKSB7XG4gICAgICB2YXIgcCA9IHByb21pc2lmeVJlcXVlc3RDYWxsKGluZGV4ZWREQiwgJ29wZW4nLCBbbmFtZSwgdmVyc2lvbl0pO1xuICAgICAgdmFyIHJlcXVlc3QgPSBwLnJlcXVlc3Q7XG5cbiAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgaWYgKHVwZ3JhZGVDYWxsYmFjaykge1xuICAgICAgICAgIHVwZ3JhZGVDYWxsYmFjayhuZXcgVXBncmFkZURCKHJlcXVlc3QucmVzdWx0LCBldmVudC5vbGRWZXJzaW9uLCByZXF1ZXN0LnRyYW5zYWN0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwLnRoZW4oZnVuY3Rpb24oZGIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEQihkYik7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRlbGV0ZTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKGluZGV4ZWREQiwgJ2RlbGV0ZURhdGFiYXNlJywgW25hbWVdKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBleHA7XG4gIH1cbiAgZWxzZSB7XG4gICAgc2VsZi5pZGIgPSBleHA7XG4gIH1cbn0oKSk7XG4iLCJpbXBvcnQgaWRiIGZyb20gJ2lkYic7XHJcblxyXG4vLyBtb3JlIG9uIHVzYWdlIG9mIHRoaXMgQVBJIGhlcmUgOiBodHRwczovL2dpdGh1Yi5jb20vamFrZWFyY2hpYmFsZC9pZGJcclxuLy8gZ29lcyBhcyBmb2xsb3dzIGlkYi5vcGVuKG5hbWUsIHZlcnNpb24sIHVwZ3JhZGVDYWxsYmFjaylcclxuLy8gRXhhbXBsZTogXHJcbi8vIFRoaXMgcmV0dXJucyBhIHByb21pc2UsIGxldCdzIHN0b3JlIHRoYXQgZm9yIGxhdGVyIHdpdGggYSB2YXJcclxuXHJcbnZhciBkYlByb21pc2UgPSBpZGIub3BlbigndGVzdC1kYicsIDIsIFxyXG4gIC8vIHRoaXMgZGVmaW5lcyB0aGUgZGF0YWJhc2VcclxuICBmdW5jdGlvbih1cGdyYWRlRGIpe1xyXG4gICAgXHJcbiAgICAvLyB0aGlzIGNyZWF0ZXMgYSBzd2l0Y2ggdG8gdXBkYXRlIHRoZSBicm93c2VyIHdpdGggdGhlIG5ldyB2ZXJzaW9uIG9mIHRoZSBpbmRleERCLCB0byB0aGUgbmV3IG9uZVxyXG4gICAgc3dpdGNoKHVwZ3JhZGVEYi5vbGRWZXJzaW9uKXtcclxuXHJcbiAgICAgLy8gY2FzZSAwIGlzIGNhbGxlZCBpZiB0aGUgYnJvd3NlciBkb2VzIG5vdCBoYXZlIHRoZSBmaXJzdCB2ZXJzaW9uIGluc3RhbGxlZCwgdGhlbiBpdCBpbnN0YWxscyBpdCBpZiBpdCBkb2VzIG5vdCBcclxuICAgICAgY2FzZSAwOlxyXG4gICAgICAvLyB0aGlzIHN0b3JlIGhhcyBhIGtleSB0aGF0J3Mgc2VwYXJhdGUgdG8gdGhlIGRhdGEsIHdoaWNoIGlzIHdoYXQgd2Ugd2FudCB0byBzdG9yZSBpbiBrZXl2YWxTdG9yZVxyXG4gICAgICB2YXIga2V5VmFsU3RvcmUgPSB1cGdyYWRlRGIuY3JlYXRlT2JqZWN0U3RvcmUoJ2tleXZhbCcpO1xyXG5cclxuICAgICAgLy9vYmplY3RTdG9yZSBkb2N1bWVudGF0aW9uIGhlcmU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JREJPYmplY3RTdG9yZVxyXG4gICAgICAvLyBhY2NlcHRzIHRoZSB2YWx1ZXMgb2Ygb2JqZWN0U3RvcmUobmFtZSwgb3B0aW9uYWxLZXkpXHJcbiAgICAgIGtleVZhbFN0b3JlLnB1dChcclxuICAgICAgICAvLyB0aGlzIGlzIHRoZSBvYmplY3QgbmFtZTpcclxuICAgICAgICAnd29ybGQnLCBcclxuICAgICAgICAvLyBhbmQgdGhpcyBpcyB0aGUgb3B0aW9uYWwga2V5XHJcbiAgICAgICAgJ2hlbGxvJyk7XHJcblxyXG4gICAgLy8gYWZ0ZXIgY2FzZSAxIGlzIGNhbGxlZCwgdGhpcyBzdG9yZXMgIHRoZSBuZXcgb2JqZWN0U3RvcmUgYWZ0ZXIgdGhlIGZpcnN0IGNhc2UgaGFzZSBiZWVuIGNyZWF0ZXIsIG9yIGlmIGFscmVhZHkgY3JlYXRlZFxyXG4gICAgLy8gaXQgaW5zdGFsbHMgY2FzZSAxIGFmdGVyIGNvbmZpcm1pbmcgY2FzZSAwIGlzIGNyZWF0ZWRcclxuICAgIGNhc2UgMTpcclxuICAgIFxyXG4gICAgICAvLyBvYmplY3Qgc3RvcmVzIGNhbiBvbmx5IGJlIGNhbGxlZCB3aXRoaW4gdGhlIHVwZ3JhZGVEYiBmdW5jdGlvbiBub3doZXJlIGVsc2UuXHJcbiAgICAgIC8vIGJlbG93IGlzIHRoZSBjb2RlICB0byBjcmVhdGUgYSBuZXcgb2JqZWN0IHN0b3JlIGZvciB0aGUgJ3Blb3BsZScgb2JqZWN0XHJcbiAgICAgIC8vIFRoaXMgc2V0cyB0aGUgb2JqZWN0J3MgJ25hbWUnIGFzIHRoZSBrZXksIHdoaWNoIGlzIHN0b3JlZCBieSBuYW1lIHJhdGhlciB0aGFuIGJ5IGtleVxyXG4gICAgICAvLyB3aGVuIGFkZGluZyBuZXcgb2JqZWN0IHN0b3JlcywgdGhlIHZlcnNpb24gbmVlZHMgdG8gYmUgY2hhbmdlZFxyXG4gICAgICB1cGdyYWRlRGIuY3JlYXRlT2JqZWN0U3RvcmUoJ3Blb3BsZScsIHtrZXlQYXRoOiAnbmFtZSd9KTtcclxuICAgIH1cclxuXHJcbn0pO1xyXG5cclxuLy8gdGhpcyBjYWxscyBvdXIgZGF0YWJhc2UsIGFuZCByZWFkcyBmcm9tIGl0LCBhZnRlciB0aGUgcHJvbWlzZSBoYXMgYmVlbiBmdWxmaWxsZWQgKGRiUHJvbWlzZSlcclxuZGJQcm9taXNlLnRoZW4oZnVuY3Rpb24oZGIpe1xyXG5cclxuICAvLyB0aGlzIGlzIHRoZSBmdW5jdGlvbiB0byByZWFkIGZyb20gdGhlIGRhdGFiYXNlIHdoaWNoIGFjY2VwdHMgdGhlIG9iamVjdFN0b3JlIHdoaWNoIHdhcyBjcmVhdGVkIGFib3ZlLCBpbiB0aGlzIGNhc2Uga2V5dmFsXHJcbiAgLy8gdGhpcyBmdW5jdGlvbiBzZWxlY3RzIHRoZSAna2V5dmFsJyBvYmplY3Qgc3RvcmUsIHJlYWR5IHRvIHVzZSwgd2l0aCBhbiBvcHRpb25hbCAnZG8gc29tZXRoaW5nJyBhcmd1bWVudFxyXG4gIHZhciB0cmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKCdrZXl2YWwnKTtcclxuXHJcbiAgLy8gdGhpcyBjYWxscyB0aGUgb2JqZWN0IHN0b3JlIChEQikgd2Ugd2FudCB0byBkaXNwbGF5XHJcbiAgdmFyIGtleVZhbERCID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoJ2tleXZhbCcpO1xyXG5cclxuICAvLyB0aGlzIHJldHVybnMgYSBrZXkgd2l0aGluIHRoZSBrZXl2YWwgb2JqZWN0LCBpbiB0aGllIGNhc2UgdGhlICdoZWxsbycgY3JlYXRlZCBhYm92ZVxyXG4gIC8vIHRoaXMgcmV0dXJucyBhIHByb21pc2VcclxuICByZXR1cm4ga2V5VmFsREIuZ2V0KCdoZWxsbycpO1xyXG5cclxuICAvLyB3aXRoaW4gdGhlIHByb21pc2UsIHdlIGdyYWIgdGhlIHZhbHVlIG9mIGhlbGxvLCB3aGljaCBpbiB0aGlzIGNhc2UgaXMgd29ybGQuXHJcbiAgLy8gdGhlIHZhbHVlIG9mIHRoaXMga2V5IHN0b3JlIGlzIHRoZSBmdW5jdGlvbiBhcmd1bWVudFxyXG59KS50aGVuKGZ1bmN0aW9uKHZhbCl7XHJcbiAgY29uc29sZS5sb2coJ1RoZSB2YWx1ZSBvZiBcImhlbGxvXCIgaXM6JywgdmFsKTtcclxufSk7XHJcblxyXG4vLyB0aGUgZm9sbG93aW5nIGlzIHVzZWQgdG8gYWRkIHZhbHVlcyB0byBleHNpc3Rpbmcgb2JqZWN0IHN0b3Jlc1xyXG5kYlByb21pc2UudGhlbihmdW5jdGlvbihkYil7XHJcbiAgLy8gb25jZSBhZ2FpbiBncmFicyBvdXIgREIsIGJ1dCB0aGlzIHRpbWUsICdyZWFkd3JpdGUnIGlzIGFkZGVkIHRvIHRoZSBvcHRpb25hbCB2YWx1ZXRvIHdyaXRlIHNvbWV0aGluZ1xyXG4gIHZhciB0cmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKCdrZXl2YWwnLCAncmVhZHdyaXRlJyk7XHJcblxyXG4gIC8vIHRoaXMgb25jZSBhZ2FpbiBjYWxscyBvdXIgZGIgYWZ0ZXIgaXRzIGJlZW4gcmVnaXN0ZXJlZFxyXG4gIHZhciBrZXlWYWxXcml0ZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKCdrZXl2YWwnKTtcclxuXHJcbiAgLy8gdGhpcyBzdG9yZXMgbmV3IHZhbHVlcyBpbnRvIHVyIERCLCB3aXRoIHRoZSB2YWx1ZSBiZWluZyB0aGUgZmlyc3QgYXJndW1lbnQgYW5kIHRoZSBrZXkgYmVpbmcgdGhlIHNlY29uZCBhcmd1bWVudFxyXG4gIGtleVZhbFdyaXRlLnB1dCgnYmFyJywgJ2ZvbycpO1xyXG5cclxuICAvLyB0aGlzIHJldHVybnMgYSBwcm9taXNlLCB0aGF0IG9ubHkgcmV0dXJucyBpZiBhbmQgd2hlbiB0aGUgdHJhbnNhY3Rpb24gY29tcGxldGVzLCBhbmQgcmVqZWN0cyBpZiBpdCBmYWlsc1xyXG4gIHJldHVybiB0cmFuc2FjdGlvbi5jb21wbGV0ZTtcclxufSkudGhlbihmdW5jdGlvbigpe1xyXG4gIGNvbnNvbGUubG9nKCdBZGRlZCBmb286YmFyIHRvIGtleXZhbCcpO1xyXG59KTtcclxuXHJcbi8vIHRoZSBmb2xsb3dpbmcgaXMgdXNlZCB0byBhZGQgdmFsdWVzIHRvIGV4c2lzdGluZyBvYmplY3Qgc3RvcmVzXHJcbmRiUHJvbWlzZS50aGVuKGZ1bmN0aW9uKGRiKXtcclxuICAvLyBvbmNlIGFnYWluIGdyYWJzIG91ciBEQiwgYnV0IHRoaXMgdGltZSwgJ3JlYWR3cml0ZScgaXMgYWRkZWQgdG8gdGhlIG9wdGlvbmFsIHZhbHVldG8gd3JpdGUgc29tZXRoaW5nXHJcbiAgdmFyIHRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oJ2tleXZhbCcsICdyZWFkd3JpdGUnKTtcclxuXHJcbiAgLy8gdGhpcyBvbmNlIGFnYWluIGNhbGxzIG91ciBkYiBhZnRlciBpdHMgYmVlbiByZWdpc3RlcmVkXHJcbiAgdmFyIGtleVZhbFdyaXRlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoJ2tleXZhbCcpO1xyXG5cclxuICAvLyB0aGlzIHN0b3JlcyBuZXcgdmFsdWVzIGludG8gdXIgREIsIHdpdGggdGhlIHZhbHVlIGJlaW5nIHRoZSBmaXJzdCBhcmd1bWVudCBhbmQgdGhlIGtleSBiZWluZyB0aGUgc2Vjb25kIGFyZ3VtZW50XHJcbiAga2V5VmFsV3JpdGUucHV0KCdkb2cnLCAnZmF2b3JpdGVBbmltYWwnKTtcclxuXHJcbiAgLy8gdGhpcyByZXR1cm5zIGEgcHJvbWlzZSwgdGhhdCBvbmx5IHJldHVybnMgaWYgYW5kIHdoZW4gdGhlIHRyYW5zYWN0aW9uIGNvbXBsZXRlcywgYW5kIHJlamVjdHMgaWYgaXQgZmFpbHNcclxuICByZXR1cm4gdHJhbnNhY3Rpb24uY29tcGxldGU7XHJcbn0pLnRoZW4oZnVuY3Rpb24oKXtcclxuICBjb25zb2xlLmxvZygnQWRkZWQgZmF2b3JpdGVBbmltYWwga2V5IDogZG9nJyk7XHJcbn0pO1xyXG5cclxuLy8gdGhlIGZvbGxvd2luZyBjcmVhdGVzIHRoZSB2YWx1ZXMgdG8gdGhlIHBlb3BsZSBPYmplY3Qgc3RvcmU6XHJcbmRiUHJvbWlzZS50aGVuKGZ1bmN0aW9uKGRiKXtcclxuICAvLyBvbmNlIGFnYWluIGdyYWJzIG91ciBEQiwgYnV0IHRoaXMgdGltZSwgJ3JlYWR3cml0ZScgaXMgYWRkZWQgdG8gdGhlIG9wdGlvbmFsIHZhbHVldG8gd3JpdGUgc29tZXRoaW5nXHJcbiAgdmFyIHRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oJ3Blb3BsZScsICdyZWFkd3JpdGUnKTtcclxuXHJcbiAgLy8gdGhpcyBvbmNlIGFnYWluIGNhbGxzIG91ciBkYiBhZnRlciBpdHMgYmVlbiByZWdpc3RlcmVkXHJcbiAgdmFyIHBlb3BsZVN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoJ3Blb3BsZScpO1xyXG5cclxuICAvLyB0aGlzIHN0b3JlcyBuZXcgdmFsdWVzIGludG8gdXIgREIsIGNyZWF0aW5nIGFuIG9iamVjdCB3aXRoIHdoYXRldmVyIHZhbHVlcyBJIHNldCB3aXRoaW4gdGhlIHRyYW5zYWN0aW9uLnB1dCBhcmd1bWVudHMuXHJcbiAgLy8gVGhlcmUgaXMgbm8ga2V5IG5lY2Vzc2FyeSBoZXJlLCBzaW5jZSB3ZSBoYXZlIHRvbGQgdGhpcyBzcGVjaWZpYyBzdG9yZSB0byBhZGQgdGhlIG5hbWUgcHJvcGVydHkgYXMgdGhlIGtleSBmb3IgdGhpcyBEQlxyXG4gIC8vIEV4YW1wbGUgaGVyZTogXHJcbiAgcGVvcGxlU3RvcmUucHV0KHtcclxuICAgIG5hbWU6J1NhbSBNdW5veicsXHJcbiAgICBhZ2U6IDI1LFxyXG4gICAgZmF2b3JpdGVBbmltYWw6ICdkb2cnXHJcbiAgfSk7XHJcblxyXG4gIC8vIGhlcmUgYXJlIG1vcmUgdG8gcGVvcGxlIHRvIGFkZCB0byB0aGlzIERCIG9iamVjdFN0b3JlOlxyXG4gIHBlb3BsZVN0b3JlLnB1dCh7XHJcbiAgICBuYW1lOidIZXJtaW9uZSBHcmFuZ2VyJyxcclxuICAgIGFnZTogMTgsXHJcbiAgICBmYXZvcml0ZUFuaW1hbDogJ2NhdCdcclxuICB9KTsgIFxyXG5cclxuICBwZW9wbGVTdG9yZS5wdXQoe1xyXG4gICAgbmFtZTonSGFycnkgUG90dGVyJyxcclxuICAgIGFnZTogMTksXHJcbiAgICBmYXZvcml0ZUFuaW1hbDogJ293bCdcclxuICB9KTsgIFxyXG5cclxuICBwZW9wbGVTdG9yZS5wdXQoe1xyXG4gICAgbmFtZTonUm9uYWxkIFdlc2xleScsXHJcbiAgICBhZ2U6IDE5LFxyXG4gICAgZmF2b3JpdGVBbmltYWw6ICdyYXQnXHJcbiAgfSk7IFxyXG5cclxuICAvLyB0aGlzIHJldHVybnMgYSBwcm9taXNlLCB0aGF0IG9ubHkgcmV0dXJucyBpZiBhbmQgd2hlbiB0aGUgdHJhbnNhY3Rpb24gY29tcGxldGVzLCBhbmQgcmVqZWN0cyBpZiBpdCBmYWlsc1xyXG4gIHJldHVybiB0cmFuc2FjdGlvbi5jb21wbGV0ZTtcclxufSkudGhlbihmdW5jdGlvbigpe1xyXG4gIGNvbnNvbGUubG9nKCdQZW9wbGUgYWRkZWQnKTtcclxufSk7XHJcblxyXG4vLyB0aGUgZm9sbG93aW5nIHJlYWRzIHRoZSB2YWx1ZXMgb2YgdGhlIHBlb3BsZSBvYmplY3RTdG9yZVxyXG4vLyB0aGlzIGNhbGxzIG91ciBkYXRhYmFzZSwgYW5kIHJlYWRzIGZyb20gaXQsIGFmdGVyIHRoZSBwcm9taXNlIGhhcyBiZWVuIGZ1bGZpbGxlZCAoZGJQcm9taXNlKVxyXG5kYlByb21pc2UudGhlbihmdW5jdGlvbihkYil7XHJcblxyXG4gIC8vIHRoaXMgaXMgdGhlIGZ1bmN0aW9uIHRvIHJlYWQgZnJvbSB0aGUgZGF0YWJhc2Ugd2hpY2ggYWNjZXB0cyB0aGUgb2JqZWN0U3RvcmUgd2hpY2ggd2FzIGNyZWF0ZWQgYWJvdmUsIGluIHRoaXMgY2FzZSBrZXl2YWxcclxuICAvLyB0aGlzIGZ1bmN0aW9uIHNlbGVjdHMgdGhlICdrZXl2YWwnIG9iamVjdCBzdG9yZSwgcmVhZHkgdG8gdXNlLCB3aXRoIGFuIG9wdGlvbmFsICdkbyBzb21ldGhpbmcnIGFyZ3VtZW50XHJcbiAgdmFyIHRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oJ3Blb3BsZScpO1xyXG5cclxuICAvLyB0aGlzIGNhbGxzIHRoZSBvYmplY3Qgc3RvcmUgKERCKSB3ZSB3YW50IHRvIGRpc3BsYXlcclxuICB2YXIgcGVvcGxlUmVhZCA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKCdwZW9wbGUnKTtcclxuXHJcbiAgLy8gdGhpcyByZXR1cm5zIGFsbCBrZXlzIGFuZCB2YWx1ZXMgd2l0aGluIHRoZSBwZW9wbGUgb2JqZWN0U1RvcmVcclxuICByZXR1cm4gcGVvcGxlUmVhZC5nZXRBbGwoKTtcclxuXHJcbiAgLy8gb25jZSBmdWxmaWxsZWQsIHRoaXMgbG9ncyB0aGUgdmFsdWVzIG9mIHRoZSBwZW9wbGUgc3RvcmVcclxuICAvLyB0aGlzIGdyYWJzIEFMTCB0aGUgdmFsdWVzIG9mIHRoZSBEQiBhbmQgbG9ncyB0aGVtIGluIGFscGhhYmV0aWNhbCBvcmRlclxyXG4gIC8vIFZFUlkgSU1QT1JUQU5UIHRoaXMgaXMgZXhhY3RseSBob3cgdGhlIHZhbHVlcyB3aWxsIGJlIGdyYWJiZWQgZnJvbSB0aGUgdHJhbnNwb3J0YXRpb24gQVBJIGFuZCBwbGFjZWQgd2l0aGluIHRoZSB2aWV3IG9mIHRoZSBhcHBsaWNhdGlvblxyXG4gIC8vIFxyXG59KS50aGVuKGZ1bmN0aW9uKHZhbCl7XHJcbiAgY29uc29sZS5sb2coJ1Blb3BsZTonLCB2YWwpO1xyXG59KTsiXX0="}