(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

self.addEventListener('install', function (event) {
  var urlsToCache = ['/', 'js/main.js', 'css/main.css', 'imgs/icon.png', 'https://fonts.gstatic.com/s/roboto/v15/2UX7WLTfW3W8TclTUvlFyQ.woff', 'https://fonts.gstatic.com/s/roboto/v15/d-6IYplOFocCacKzxwXSOD8E0i7KZn-EPnyo3HZu7kw.woff'];

  event.waitUntil(
  // TODO: open a cache named 'wittr-static-v1'
  // Add cache the urls from urlsToCache
  caches.open('wittr-static-v1').then(function (cache) {
    return cache.addAll(urlsToCache);
  }));
});

self.addEventListener('fetch', function (event) {
  // Leave this blank for now.
  // We'll get to this in the next task.
  // creates the fetch response grabbing the cache
  event.respondWith(
  // attempts to match cache files with event.request.
  // if no matches are found, the promise will return as unresolved / undefined
  caches.match(event.request).then(function (response) {
    // if the request is true(thy) and has a response, then we return it with an if statement
    if (response) return response;
    // if not, then we return a fetch to the network with the original request (this will not work offline)
    return fetch(event.request);
  }));
});

},{}],2:[function(require,module,exports){
"use strict";

var r = FetchEvent.prototype.respondWith;
FetchEvent.prototype.respondWith = function () {
  return new URL(this.request.url).search.endsWith("bypass-sw") ? void 0 : r.apply(this, arguments);
};

},{}]},{},[1,2])

//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJEOi9Eb2N1bWVudHMvU2Nob29sL1VkYWNpdHkvY291cnNlcy9vZmZsaW5lLWFwcGxpY2F0aW9ucy9sZXNzb24tMi93aXR0ci9wdWJsaWMvanMvc3cvaW5kZXguanMiLCJEOi9Eb2N1bWVudHMvU2Nob29sL1VkYWNpdHkvY291cnNlcy9vZmZsaW5lLWFwcGxpY2F0aW9ucy9sZXNzb24tMi93aXR0ci9wdWJsaWMvanMvc3cvcHJlcm9sbC9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxVQUFTLEtBQUssRUFBRTtBQUMvQyxNQUFJLFdBQVcsR0FBRyxDQUNoQixHQUFHLEVBQ0gsWUFBWSxFQUNaLGNBQWMsRUFDZCxlQUFlLEVBQ2Ysb0VBQW9FLEVBQ3BFLHlGQUF5RixDQUMxRixDQUFDOztBQUVGLE9BQUssQ0FBQyxTQUFTOzs7QUFHYixRQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQzdCLElBQUksQ0FBQyxVQUFTLEtBQUssRUFBQztBQUNwQixXQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7R0FDakMsQ0FBQyxDQUNILENBQUM7Q0FDSCxDQUFDLENBQUM7O0FBRUgsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFTLEtBQUssRUFBRTs7OztBQUk3QyxPQUFLLENBQUMsV0FBVzs7O0FBR2hCLFFBQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFTLFFBQVEsRUFBQzs7QUFFbEQsUUFBSSxRQUFRLEVBQUUsT0FBTyxRQUFRLENBQUM7O0FBRTlCLFdBQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztHQUM1QixDQUFDLENBQ0YsQ0FBQztDQUNILENBQUMsQ0FBQzs7Ozs7QUNsQ0gsSUFBSSxDQUFDLEdBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUE7QUFDdEMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUMsWUFBVTtBQUFDLFNBQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFDLEtBQUssQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFDLFNBQVMsQ0FBQyxDQUFBO0NBQUMsQ0FBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2luc3RhbGwnLCBmdW5jdGlvbihldmVudCkge1xyXG4gIHZhciB1cmxzVG9DYWNoZSA9IFtcclxuICAgICcvJyxcclxuICAgICdqcy9tYWluLmpzJyxcclxuICAgICdjc3MvbWFpbi5jc3MnLFxyXG4gICAgJ2ltZ3MvaWNvbi5wbmcnLFxyXG4gICAgJ2h0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9yb2JvdG8vdjE1LzJVWDdXTFRmVzNXOFRjbFRVdmxGeVEud29mZicsXHJcbiAgICAnaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbS9zL3JvYm90by92MTUvZC02SVlwbE9Gb2NDYWNLenh3WFNPRDhFMGk3S1puLUVQbnlvM0hadTdrdy53b2ZmJ1xyXG4gIF07XHJcblxyXG4gIGV2ZW50LndhaXRVbnRpbChcclxuICAgIC8vIFRPRE86IG9wZW4gYSBjYWNoZSBuYW1lZCAnd2l0dHItc3RhdGljLXYxJ1xyXG4gICAgLy8gQWRkIGNhY2hlIHRoZSB1cmxzIGZyb20gdXJsc1RvQ2FjaGVcclxuICAgIGNhY2hlcy5vcGVuKCd3aXR0ci1zdGF0aWMtdjEnKVxyXG4gICAgLnRoZW4oZnVuY3Rpb24oY2FjaGUpe1xyXG4gICAgXHRyZXR1cm4gY2FjaGUuYWRkQWxsKHVybHNUb0NhY2hlKTtcclxuICAgIH0pXHJcbiAgKTtcclxufSk7XHJcblxyXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2ZldGNoJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAvLyBMZWF2ZSB0aGlzIGJsYW5rIGZvciBub3cuXHJcbiAgLy8gV2UnbGwgZ2V0IHRvIHRoaXMgaW4gdGhlIG5leHQgdGFzay5cclxuICAvLyBjcmVhdGVzIHRoZSBmZXRjaCByZXNwb25zZSBncmFiYmluZyB0aGUgY2FjaGVcclxuICBldmVudC5yZXNwb25kV2l0aChcclxuICBcdC8vIGF0dGVtcHRzIHRvIG1hdGNoIGNhY2hlIGZpbGVzIHdpdGggZXZlbnQucmVxdWVzdC5cclxuICBcdC8vIGlmIG5vIG1hdGNoZXMgYXJlIGZvdW5kLCB0aGUgcHJvbWlzZSB3aWxsIHJldHVybiBhcyB1bnJlc29sdmVkIC8gdW5kZWZpbmVkXHJcbiAgXHRjYWNoZXMubWF0Y2goZXZlbnQucmVxdWVzdCkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgXHRcdC8vIGlmIHRoZSByZXF1ZXN0IGlzIHRydWUodGh5KSBhbmQgaGFzIGEgcmVzcG9uc2UsIHRoZW4gd2UgcmV0dXJuIGl0IHdpdGggYW4gaWYgc3RhdGVtZW50XHJcbiAgXHRcdGlmIChyZXNwb25zZSkgcmV0dXJuIHJlc3BvbnNlO1xyXG4gIFx0XHQvLyBpZiBub3QsIHRoZW4gd2UgcmV0dXJuIGEgZmV0Y2ggdG8gdGhlIG5ldHdvcmsgd2l0aCB0aGUgb3JpZ2luYWwgcmVxdWVzdCAodGhpcyB3aWxsIG5vdCB3b3JrIG9mZmxpbmUpXHJcbiAgXHRcdHJldHVybiBmZXRjaChldmVudC5yZXF1ZXN0KTtcclxuICBcdH0pXHJcbiAgKTtcclxufSk7IiwidmFyIHI9RmV0Y2hFdmVudC5wcm90b3R5cGUucmVzcG9uZFdpdGhcclxuRmV0Y2hFdmVudC5wcm90b3R5cGUucmVzcG9uZFdpdGg9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFVSTCh0aGlzLnJlcXVlc3QudXJsKS5zZWFyY2guZW5kc1dpdGgoXCJieXBhc3Mtc3dcIik/dm9pZCAwOnIuYXBwbHkodGhpcyxhcmd1bWVudHMpfSJdfQ==